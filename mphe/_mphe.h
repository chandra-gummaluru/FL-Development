/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package mphe */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "export.go"

#include <stdbool.h>
#include <stddef.h>

typedef struct {
	double* data;
	size_t size;
} Ldouble;

typedef struct {
	long long unsigned int* data;
	size_t size;
} Luint64;

// Params
typedef struct {
	Luint64 qi;
	Luint64 pi;

    int logN;
	int logSlots;
	
	double scale;
	double sigma;
} Params;

// Poly
typedef struct {
	Luint64* coeffs;
	size_t size;
} Poly;

// PolyPair
typedef struct {
	Poly p0;
	Poly p1;
} PolyPair;

// Share
typedef struct {
	Poly* data;
	size_t size;
} Share;

// Ciphertext
typedef struct {
	Poly* value;
	size_t size;

	double scale;
	bool isNTT;
} Ciphertext;

// Data
typedef struct {
	Ciphertext* data;
	size_t size;
} Data;

// MPHEServer
typedef struct {
	Params params;
	Poly crs;
	Poly secretKey;
	Data data;
} MPHEServer;

// MPHEClient
typedef struct {
	Params params;
	Poly crs;
	Poly secretKey;
	Poly decryptionKey;
} MPHEClient;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void mpheTest();
extern Params* newParams();
extern Poly* newPoly();
extern Ciphertext* newCiphertext();
extern MPHEServer* newMPHEServer();
extern Poly* genCRS(Params* parms);
extern Data* colKeySwitch(Params* parms, Data* data, Share* cksShares, size_t cksSize);
extern PolyPair* colKeyGen(Params* sparams, Poly* ssk, Poly* scrs, Share* ckgShares, size_t ckgSize);
extern Data* aggregate(Params* parms, Data* datas, size_t datasSize);
extern Data* mulByConst(Params* parms, Data* data, double cte);
extern MPHEClient* newMPHEClient();
extern Data* encryptFromPk(Params* parms, PolyPair* pk, double* array, size_t arraySize);
extern Data* encryptFromSk(Params* parms, Poly* sk, double* array, size_t arraySize);
extern Ldouble* decrypt(Params* parms, Poly* sk, Data* data);
extern Poly* genSecretKey(Params* parms);
extern Share* genCKGShare(Params* parms, Poly* sk, Poly* crs);
extern Share* genCKSShare(Params* parms, Poly* sk, Data* data);
extern void printParams(Params* params);
extern void printPoly(Poly* p);
extern void printPolyPair(PolyPair* pp);
extern void printCiphertext(Ciphertext* c);
extern void printCiphertext2(Params* parms, Poly* sk, Data* data);
extern PolyPair* genPublicKey(Params* parms, Poly* sk);

#ifdef __cplusplus
}
#endif
